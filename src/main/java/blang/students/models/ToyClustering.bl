package blang.students.models

import blang.students.models.StickBreaking

model ToyClustering{

  param GlobalDataSource data
  param Plate<Integer> idx
  param Plated<RealVar> obs

  // toy example with k that is large enough for 1e^-6 err in simplex requirement
  param IntVar k ?: 35
  param RealVar alpha ?: 1.0
  
  random List<RealVar> b ?: latentRealList(k)
  random Plated<IntVar> cluster 
  random List<RealVar> means ?: latentRealList(k)
  
  laws {
    for (int i : 0 ..< k) {
//      means.get(i) ~ Normal(0, 10)
      b.get(i) | alpha ~ Beta(1.0, alpha)
    }
    for (Index<Integer> i : idx.indices()) {
      cluster.get(i) | b ~ Categorical(StickBreaking.BreakStick(b))
//      cluster.get(i) | DenseSimplex pi = fixedSimplex(StickBreaking.BreakStick(b)) ~ Categorical(pi)
    }
    for (Index<Integer> i : idx.indices()) {
      obs.get(i) | RealVar mu = means.get(cluster.get(i)) ~ Normal(mu, 1.0)
    }
  }
}
package blang.students.models

import org.apache.commons.math3.stat.descriptive.SummaryStatistics

/*
 * Model from: https://docs.pymc.io/notebooks/rugby_analytics.html
 * With some slight modifications, see comments.
 * Data can be found in /datasets/blang-rugby.csv
 */
 
model HierarchicalRugby{
    param GlobalDataSource data
    param Plate<String> match
    param Plated<Integer> i_home
    param Plated<Integer> i_away
    random Plated<IntVar> home_score
    random Plated<IntVar> away_score

    param Integer nTeams ?: 6

    random RealVar
            intercept    ?: latentReal,
            home         ?: latentReal,
            sd_atk       ?: latentReal,
            sd_def       ?: latentReal

    random List<RealVar> 
            atks_star  ?: latentRealList(nTeams),
            defs_star  ?: latentRealList(nTeams)

    laws {
        // PyMC3 documentation used Flat
        intercept   ~ ContinuousUniform(-10, 10)
        home        ~ ContinuousUniform(-10, 10)
        // PyMC3 documentation used HalfStudentT(nu=3, sd=2.5)
        sd_atk ~ Exponential(3)
        sd_def ~ Exponential(3)

        // _stars ~ N(0, sd_)
        for (int i : 0 ..< nTeams) {
            atks_star.get(i) | sd_atk
                ~ Normal(0, sd_atk)
            defs_star.get(i) | sd_def
                ~ Normal(0, sd_def)
        }
        // Iterating over observations: score | parameters ~ Poisson(f(parameters)) for some function f. 
        for (Index<String> match_id: match.indices){
            home_score.get(match_id) | IntVar i_a = i_away.get(match_id),
                                       IntVar i_h = i_home.get(match_id),
                                       atks_star,
                                       defs_star,
                                       intercept,
                                       home
                                       ~ Poisson(
                                           {
                                               val SummaryStatistics atks = new SummaryStatistics()
                                               for (atk : atks_star){
                                                   atks.addValue(atk)
                                               }
                                               val SummaryStatistics defs = new SummaryStatistics()
                                               for (def : defs_star){
                                                   defs.addValue(def)
                                               }
                                               val double mean = atks.getMean() + defs.getMean()
                                               val double result = Math.exp(atks_star.get(i_h) + defs_star.get(i_a) - mean + intercept + home)
                                               if (result == 0)
                                                 Generators::ZERO_PLUS_EPS
                                               else if (result == Double::POSITIVE_INFINITY)
                                                 Double::MAX_VALUE
                                               else
                                                 result                                                  
                                           }
                                       )
            away_score.get(match_id) | IntVar i_a = i_away.get(match_id),
                                       IntVar i_h = i_home.get(match_id),
                                       atks_star,
                                       defs_star,
                                       intercept
                                       ~ Poisson(
                                           {
                                               val SummaryStatistics atks = new SummaryStatistics()
                                               for (atk : atks_star){
                                                   atks.addValue(atk)
                                               }
                                               val SummaryStatistics defs = new SummaryStatistics()
                                               for (def : defs_star){
                                                   defs.addValue(def)
                                               }
                                               val double mean = atks.getMean() + defs.getMean()
                                               val double result = Math.exp(atks_star.get(i_a) + defs_star.get(i_h) - mean + intercept)
                                               if (result == 0)
                                                 Generators::ZERO_PLUS_EPS
                                               else if (result == Double::POSITIVE_INFINITY)
                                                 Double::MAX_VALUE
                                               else
                                                 result                                                  
                                           })


            }
        }
    }

